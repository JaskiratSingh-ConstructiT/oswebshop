{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}{\f1\froman\fcharset0 Times New Roman;}{\f2\fmodern\fcharset134 \'d0\'c2\'cb\'ce\'cc\'e5;}}
{\colortbl ;\red0\green0\blue255;\red127\green0\blue0;\red255\green0\blue0;\red0\green127\blue0;\red0\green255\blue255;\red127\green127\blue127;\red0\green0\blue0;\red255\green255\blue255;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}}
{\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\keepn\s1\sb240\sa60\qc\kerning32\b\f0\fs32 Console Add Item \endash  eBay API/SDK Tutorial\par
\pard\kerning0\b0\f1\fs24\par
This tutorial is a simple example of how to create a new listing on the eBay site using an eBay SDK to interact with the eBay API. You can find the code used in this tutorial in the Samples/C#/ConsoleAddItem folder of the .Net SDK package. \par
\par
\par
\b\i\f0\fs28 Prerequisites\b0\i0\f1\fs24 :\par
1. eBay Trading SDK for .Net 2.0\par
2. An eBay user token\par
3. Visual Studio 2005(or 2008)\par
\par
\pard\keepn\s2\sb240\sa60\b\i\f0\fs28 Steps to Create the Console Add Item Sample:\par
\pard\i0\f1\fs24 1.\b0  Create a new console application called ConsoleAddItem in Visual Studio (see Fig 1).\par
\pard\qc\par
Fig 1. ConsoleAddItem Project\par
\pard\par
\b 2.\b0  Add a new application configuration file (App.config, see Fig 2) to this project. This file will contain some configuration information, such as your eBay user token and API Server URL, needed for calling the eBay API (see Listing 1). Please update the token value with your own token before you run this sample.\par
\par
\pard\qc\par
Fig 2. Application configuration file\par
\pard\par
\pard\cbpat8\cf1\f2\fs18 <?\cf2 xml\cf1  \cf3 version\cf1 =\cf0 "\cf1 1.0\cf0 "\cf1  \cf3 encoding\cf1 =\cf0 "\cf1 utf-8\cf0 "\cf1  ?>\par
<\cf2 configuration\cf1 >\par
  <\cf2 appSettings\cf1 >\par
    <!--\cf4  API Server URL, required \cf1 -->\par
    <!--\cf4  For production site use: https://api.ebay.com/wsapi \cf1 -->\par
    <!--\cf4  For Sandbox site use: https://api.sandbox.ebay.com/wsapi \cf1 -->\par
    <\cf2 add\cf1  \cf3 key\cf1 =\cf0 "\cf1 Environment.ApiServerUrl\cf0 "\cf1  \cf3 value\cf1 =\cf0 "\cf1 https://api.sandbox.ebay.com/wsapi\cf0 "\cf1 />\par
    <!--\cf4  User token for API server access, required \cf1 -->\par
    <\cf2 add\cf1  \cf3 key\cf1 =\cf0 "\cf1 UserAccount.ApiToken\cf0 "\cf1  \cf3 value\cf1 =\cf0 "\cf1 you ebay user token\cf0 "\cf1 />\par
  </\cf2 appSettings\cf1 >\par
</\cf2 configuration\cf1 >\cf0\f1\fs24\par
\pard\qc Listing 1. Content of App.config\par
\pard\par
\b 3.\b0  Add references to the eBay.Service assembly and to the System.configuration .Net assembly (see Fig 3). You will find the assemblies in the root folder of your eBay SDK for .Net installation. eBay.Service assembly is the main component of the SDK, and it encapsulates eBay API calls and hides the low-level communication details from you. \par
\par
\pard\qc\par
Fig 3. eBay.Service assembly\par
\pard\par
\par
\b 4.\b0  In the main Program class (see Fig. 4), provide references to calls and classes in the SDK by importing the following .Net namespaces and SDK namespaces, also provide namespace, class name and variable definition at the same time:\par
\par
\pard\qc\par
Fig 4 the Main Program class\par
\pard\par
\par
\pard\cbpat8\cf1\f2\fs18 using\cf0  System;\par
\cf1 using\cf0  System.Configuration;\par
\cf1 using\cf0  eBay.Service.Call;\par
\cf1 using\cf0  eBay.Service.Core.Sdk;\par
\cf1 using\cf0  eBay.Service.Core.Soap;\par
\cf1 using\cf0  eBay.Service.Util;\par
\par
\cf1 namespace\cf0  ConsoleAddItem\par
\{\par
    \cf1 class\cf0  \cf5 Program\par
\cf0     \{\par
        \cf1 private\cf0  \cf1 static\cf0  \cf5 ApiContext\cf0  apiContext = \cf1 null\cf0 ;\par
\par
\pard\qc\f1\fs24 Listing 2. Import Namespace\par
\pard\par
\b 5.\b0  In order to call the eBay API, you need to initialize an ApiContext object first. The ApiContext object contains all the configurations and settings that are necessary to call the eBay API. \par
\par
In the main Program class, create the following function, called GetApiContext (see Listing 3). In this function, we populate the ApiContext object with a user token and the server URL found in the App.config file. We also set Site in the ApiContext object to target the eBay US site.\par
\par
You can configure the ApiContext object to log all of the communication to a logger (for example, a text file). Here we\rquote re going to log all the SOAP messages to a text file. If anything goes wrong, logging is extremely helpful for troubleshooting.\par
\par
\pard\cbpat8\f2\fs18         \cf6 ///\cf4  \cf6 <summary>\par
\cf0         \cf6 ///\cf4  Populate eBay SDK ApiContext object with data from application configuration file\par
\cf0         \cf6 ///\cf4  \cf6 </summary>\par
\cf0         \cf6 ///\cf4  \cf6 <returns>\cf4 ApiContext object\cf6 </returns>\par
\cf0         \cf1 static\cf0  \cf5 ApiContext\cf0  GetApiContext()\par
        \{\par
            \cf4 //apiContext is a singleton\par
\cf0             \cf4 //to avoid duplicate configuration reading\par
\cf0             \cf1 if\cf0  (apiContext != \cf1 null\cf0 )\par
            \{\par
                \cf1 return\cf0  apiContext;\par
            \}\par
            \cf1 else\par
\cf0             \{\par
                apiContext = \cf1 new\cf0  \cf5 ApiContext\cf0 ();\par
\par
                \cf4 //set Api Server Url\par
\cf0                 apiContext.SoapApiServerUrl = \par
                    \cf5 ConfigurationManager\cf0 .AppSettings[\cf2 "Environment.ApiServerUrl"\cf0 ];\par
                \cf4 //set Api Token to access eBay Api Server\par
\cf0                 \cf5 ApiCredential\cf0  apiCredential = \cf1 new\cf0  \cf5 ApiCredential\cf0 ();\par
                apiCredential.eBayToken = \par
                    \cf5 ConfigurationManager\cf0 .AppSettings[\cf2 "UserAccount.ApiToken"\cf0 ];\par
                apiContext.ApiCredential = apiCredential;\par
                \cf4 //set eBay Site target to US\par
\cf0                 apiContext.Site = \cf5 SiteCodeType\cf0 .US;\par
\par
                \cf4 //set Api logging\par
\cf0                 apiContext.ApiLogManager = \cf1 new\cf0  \cf5 ApiLogManager\cf0 ();\par
                apiContext.ApiLogManager.ApiLoggerList.Add(\par
                    \cf1 new\cf0  \cf5 FileLogger\cf0 (\cf2 "listing_log.txt"\cf0 , \cf1 true\cf0 , \cf1 true\cf0 , \cf1 true\cf0 )\par
                    );\par
                apiContext.ApiLogManager.EnableLogging = \cf1 true\cf0 ;\par
\par
\par
                \cf1 return\cf0  apiContext;\par
            \}\par
        \}\par
\pard\qc         \f1\fs24 Listing 3. GetApiContext function\par
\pard\par
\b 6.\b0  In order to list an item on eBay, you need to create a new instance of the ItemType class first.\par
\par
In the main Program class, create the following function, called BuildItem (see Listing 4). In this function, we populate the item with information such as item title and description, listing category, payment methods and shipping details, etc. For detailed requirements about how much information you should provide to list an item, please refer to eBay Trading API reference.\par
\par
\pard\cbpat8\f2\fs18         \cf6 ///\cf4  \cf6 <summary>\par
\cf0         \cf6 ///\cf4  Build a sample item\par
\cf0         \cf6 ///\cf4  \cf6 </summary>\par
\cf0         \cf6 ///\cf4  \cf6 <returns>\cf4 ItemType object\cf6 </returns>\par
\cf0         \cf1 static\cf0  \cf5 ItemType\cf0  BuildItem()\par
        \{\par
            \cf5 ItemType\cf0  item = \cf1 new\cf0  \cf5 ItemType\cf0 ();\par
\par
            \cf4 // item title\par
\cf0             item.Title = \cf2 "Test Item"\cf0 ;\par
            \cf4 // item description\par
\cf0             item.Description = \cf2 "eBay SDK sample test item"\cf0 ;\par
\par
            \cf4 // listing type\par
\cf0             item.ListingType = \cf5 ListingTypeCodeType\cf0 .Chinese;\par
            \cf4 // listing price\par
\cf0             item.Currency = \cf5 CurrencyCodeType\cf0 .USD;\par
            item.StartPrice = \cf1 new\cf0  \cf5 AmountType\cf0 ();\par
            item.StartPrice.Value = 20;\par
            item.StartPrice.currencyID = \cf5 CurrencyCodeType\cf0 .USD;\par
\par
            \cf4 // listing duration\par
\cf0             item.ListingDuration = \cf2 "Days_3"\cf0 ; \par
\par
            \cf4 // item location and country\par
\cf0             item.Location = \cf2 "San Jose"\cf0 ;\par
            item.Country = \cf5 CountryCodeType\cf0 .US;\par
\par
            \cf4 // listing category, games\par
\cf0             \cf5 CategoryType\cf0  category = \cf1 new\cf0  \cf5 CategoryType\cf0 ();\par
            category.CategoryID = "139973"; \par
            item.PrimaryCategory = category;\par
\par
            \cf4 // item quality\par
\cf0             item.Quantity = 1;\par
\par
            \cf4 // payment methods\par
\cf0             item.PaymentMethods = \cf1 new\cf0  \cf5 BuyerPaymentMethodCodeTypeCollection\cf0 ();\par
            item.PaymentMethods.AddRange(\par
                \cf1 new\cf0  \cf5 BuyerPaymentMethodCodeType\cf0 [] \{ \cf5 BuyerPaymentMethodCodeType\cf0 .PayPal \}\par
                );\par
            \cf4 // email is required if paypal is used as payment method\par
\cf0             item.PayPalEmailAddress = \cf2 "me@ebay.com"\cf0 ;\par
\par
            \cf4 // item condition, New\par
\cf0             item.ConditionID = 1000;  \par
\par
            \cf4 // handling time is required\par
\cf0             item.DispatchTimeMax = 1;\par
\par
            \cf4 // item specifics\par
            \cf0 item.ItemSpecifics = buildItemSpecifics();\par
\par
            Console.WriteLine("Do you want to use Business policy profiles to list this item? y/n");\par
            String input = Console.ReadLine();\par
            if (input.ToLower().Equals("y"))\par
            \{\par
                item.SellerProfiles = BuildSellerProfiles();\par
            \}\par
            else\par
            \{\par
\cf4                 // payment methods\par
                \cf7 item.PaymentMethods = new BuyerPaymentMethodCodeTypeCollection();\par
                item.PaymentMethods.AddRange(\par
                    new BuyerPaymentMethodCodeType[] \{ BuyerPaymentMethodCodeType.PayPal \}\par
                    );\par
\cf4                 // email is required if paypal is used as payment method\par
                \cf7 item.PayPalEmailAddress = "me@ebay.com";\par
\cf4\par
                // handling time is required\par
                \cf7 item.DispatchTimeMax = 1;\par
\cf4                 // shipping details\par
                \cf7 item.ShippingDetails = BuildShippingDetails();\cf4\par
\par
                // return policy\par
                \cf7 item.ReturnPolicy = new ReturnPolicyType();\par
                item.ReturnPolicy.ReturnsAcceptedOption = "ReturnsAccepted";\par
\cf4             \}\cf0\par
\par
            \cf1 return\cf0  item;\par
        \}\par
\f1\fs24\par
\pard\qc\par
Listing 4. BuildItem function\par
\pard\par
\b 7.\b0  In the main Program class, create a helper function called BuildShippingDetails (see Listing 5). This function is used by the BuildItem function to build sample shipping details.\par
\par
\pard\cbpat8\f2\fs18         \cf6 ///\cf4  \cf6 <summary>\par
\cf0         \cf6 ///\cf4  Build sample shipping details\par
\cf0         \cf6 ///\cf4  \cf6 </summary>\par
\cf0         \cf6 ///\cf4  \cf6 <returns>\cf4 ShippingDetailsType object\cf6 </returns>\par
\cf0         \cf1 static\cf0  \cf5 ShippingDetailsType\cf0  BuildShippingDetails()\par
        \{\par
            \cf4 // Shipping details\par
\cf0             \cf5 ShippingDetailsType\cf0  sd = \cf1 new\cf0  \cf5 ShippingDetailsType\cf0 ();\par
\par
            sd.ApplyShippingDiscount = \cf1 true\cf0 ;\par
            \cf5 AmountType\cf0  amount = \cf1 new\cf0  \cf5 AmountType\cf0 ();\par
            amount.Value = 2.8;\par
            amount.currencyID = \cf5 CurrencyCodeType\cf0 .USD;\par
            sd.PaymentInstructions = \cf2 "eBay .Net SDK test instruction."\cf0 ;\par
\par
            \cf4 // Shipping type and shipping service options\par
\cf0             sd.ShippingType = \cf5 ShippingTypeCodeType\cf0 .Flat;\par
            \cf5 ShippingServiceOptionsType\cf0  shippingOptions = \cf1 new\cf0  \cf5 ShippingServiceOptionsType\cf0 ();\par
            shippingOptions.ShippingService = \par
                \cf5 ShippingServiceCodeType\cf0 .ShippingMethodStandard.ToString();\par
            amount = \cf1 new\cf0  \cf5 AmountType\cf0 ();\par
            amount.Value = 2.0;\par
            amount.currencyID = \cf5 CurrencyCodeType\cf0 .USD;\par
            shippingOptions.ShippingServiceAdditionalCost = amount;\par
            amount = \cf1 new\cf0  \cf5 AmountType\cf0 ();\par
            amount.Value = 10;\par
            amount.currencyID = \cf5 CurrencyCodeType\cf0 .USD;\par
            shippingOptions.ShippingServiceCost = amount;\par
            shippingOptions.ShippingServicePriority = 1;\par
            amount = \cf1 new\cf0  \cf5 AmountType\cf0 ();\par
            amount.Value = 1.0;\par
            amount.currencyID = \cf5 CurrencyCodeType\cf0 .USD;\par
            shippingOptions.ShippingInsuranceCost = amount;\par
\par
            sd.ShippingServiceOptions = \cf1 new\cf0  \cf5 ShippingServiceOptionsTypeCollection\cf0 (\par
                \cf1 new\cf0  \cf5 ShippingServiceOptionsType\cf0 [] \{ shippingOptions \}\par
                );\par
\par
            \cf1 return\cf0  sd;\par
        \}\f1\fs24\par
\pard\qc Listing 5. BuildShippingDetails function\par
\pard\par
\par
\b 8.\b0  Now that all the building blocks are ready, let\rquote s wire them together in the Main function (see Listing 6). The overall call flow is shown in Fig 5:\par
\par
\pard\cbpat8\f2\fs18         \cf1 static\cf0  \cf1 void\cf0  Main(\cf1 string\cf0 [] args)\par
        \{\par
\par
            \cf1 try\cf0  \{\par
                \cf5 Console\cf0 .WriteLine(\cf2 "+++++++++++++++++++++++++++++++++++++++"\cf0 );\par
                \cf5 Console\cf0 .WriteLine(\cf2 "+ Welcome to eBay SDK for .Net Sample +"\cf0 );\par
                \cf5 Console\cf0 .WriteLine(\cf2 "+ - ConsoleAddItem                    +"\cf0 );\par
                \cf5 Console\cf0 .WriteLine(\cf2 "+++++++++++++++++++++++++++++++++++++++"\cf0 );\par
\par
                \cf4 //[Step 1] Initialize eBay ApiContext object\par
\cf0                 \cf5 ApiContext\cf0  apiContext = GetApiContext();\par
\par
                \cf4 //[Step 2] Create a new ItemType object\par
\cf0                 \cf5 ItemType\cf0  item = BuildItem();\par
\par
\par
                \cf4 //[Step 3] Create Call object and execute the Call\par
\cf0                 \cf5 AddItemCall\cf0  apiCall = \cf1 new\cf0  \cf5 AddItemCall\cf0 (apiContext);\par
                \cf5 Console\cf0 .WriteLine(\cf2 "Begin to call eBay API, please wait ..."\cf0 );\par
                \cf5 FeeTypeCollection\cf0  fees = apiCall.AddItem(item);\par
                \cf5 Console\cf0 .WriteLine(\cf2 "End to call eBay API, show call result ..."\cf0 );\par
                \cf5 Console\cf0 .WriteLine();\par
\par
                \cf4 //[Step 4] Handle the result returned\par
\cf0                 \cf5 Console\cf0 .WriteLine(\cf2 "The item was listed successfully!"\cf0 );\par
                \cf1 double\cf0  listingFee = 0.0;\par
                \cf1 foreach\cf0  (\cf5 FeeType\cf0  fee \cf1 in\cf0  fees)\par
                \{\par
                    \cf1 if\cf0  (fee.Name == \cf2 "ListingFee"\cf0 )\par
                    \{\par
                        listingFee = fee.Fee.Value;\par
                    \}\par
                \}\par
                \cf5 Console\cf0 .WriteLine(\cf5 String\cf0 .Format(\cf2 "Listing fee is: \{0\}"\cf0 , listingFee));\par
                \cf5 Console\cf0 .WriteLine(\cf5 String\cf0 .Format(\cf2 "Listed Item ID: \{0\}"\cf0 , item.ItemID));\par
            \} \par
            \cf1 catch\cf0  (\cf5 Exception\cf0  ex)\par
            \{\par
                \cf5 Console\cf0 .WriteLine(\cf2 "Fail to list the item : "\cf0  + ex.Message);\par
            \}\par
\par
            \cf5 Console\cf0 .WriteLine();\par
            \cf5 Console\cf0 .WriteLine(\cf2 "Press any key to close the program."\cf0 );\par
            \cf5 Console\cf0 .ReadKey();\par
\par
        \}\par
\f1\fs24\par
\pard\qc Listing 6. The Main function\par
\pard\par
\par
\par
\pard\qc\par
Fig 5. The Call Flow\par
\pard\par
\par
After the ItemType instance is created, we call the AddItem API and pass in the newly created ItemType instance as a parameter. If the call is successful, a FeeTypeCollection class instance will be returned. This collection instance contains all of the individual fees resulting from the item listing. Lastly, we output the Listing fee and Listed Item ID in the console (for your application, you can handle the response according to your own requirements). The main function also shows the basic exception handling. If anything goes wrong, you are responsible for catching and handling exceptions according to your requirements.\par
\par
\par
\b 9.\b0  Debug the ConsoleAddItem project in Visual Studio. You will see the output in the console window (see Fig 6.) (if anything goes wrong, you can check the log in bin\\Debug folder for troubleshooting):\par
\par
\par
\par
\pard\qc Fig 6. Console Output\par
\pard\par
\b 10.\b0  You can verify the item by searching the itemID in the eBay sandbox (or production if you configured a production API server Url in the application configuration file) site (see Fig 7).\par
\par
Now you have a working sample that can list items on the eBay site using eBay SDK. Congratulations!\par
\par
\pard\qc Fig 7. Live Item on eBay Site\par
}
 